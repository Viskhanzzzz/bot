import json
import os
import random
import time
import datetime
from telegram import (
    Update, InlineKeyboardButton, InlineKeyboardMarkup, InputMediaPhoto
)
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler, CallbackQueryHandler,
    ContextTypes, filters
)

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ===
TOKEN = "7610376495:AAFud9TUXvyQZxZ6KgSMM5fEFEidjKQHwYg"
CREATOR_ID = 7667043683  # –ó–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π Telegram ID
DATA_FILE = "users.json"
PROMO_FILE = "promocodes.json"
CARDS_FILE = "cards.json"
DAILY_CODE_FILE = "dailycode.json"

# === –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ ===
users = {}
cards = {}
daily_code = {}

# === –®–∞–Ω—Å—ã –≤—ã–ø–∞–¥–µ–Ω–∏—è –∫–∞—Ä—Ç ===
RARITY_CHANCES = [
    ("Limited", 0.02),
    ("–ú–∏—Ñ–∏—á–µ—Å–∫–∞—è", 0.1),
    ("–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω–∞—è", 1),
    ("–≠–ø–∏—á–µ—Å–∫–∞—è", 2),
    ("–†–µ–¥–∫–∞—è", 10),
    ("–û–±—ã—á–Ω–∞—è", 86.88),
]

# === –®–∞–Ω—Å—ã –ø–æ–±–µ–¥—ã –ø–æ —Ä–µ–¥–∫–æ—Å—Ç–∏ ===
RARITY_WIN_CHANCE = {
    "Limited": 99,
    "–ú–∏—Ñ–∏—á–µ—Å–∫–∞—è": 85,
    "–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω–∞—è": 70,
    "–≠–ø–∏—á–µ—Å–∫–∞—è": 40,
    "–†–µ–¥–∫–∞—è": 20,
    "–û–±—ã—á–Ω–∞—è": 10,
}

# === –ó–∞–≥—Ä—É–∑–∫–∞ / —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö ===
def load_json(path):
    if os.path.exists(path):
        with open(path, "r", encoding="utf-8") as f:
            return json.load(f)
    return {}

def save_json(path, data):
    with open(path, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

def load_all():
    global users, cards, daily_code
    users = load_json(DATA_FILE)
    cards = load_json(CARDS_FILE)
    daily_code = load_json(DAILY_CODE_FILE)

def save_all():
    save_json(DATA_FILE, users)
    save_json(CARDS_FILE, cards)
    save_json(DAILY_CODE_FILE, daily_code)

# === –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ ID ===
def generate_unique_id():
    while True:
        code = str(random.randint(100000, 999999))
        if code not in [u.get("unique_id") for u in users.values()]:
            return code

# === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ===
def ensure_user(uid):
    uid = str(uid)
    if uid not in users:
        users[uid] = {
            "unique_id": generate_unique_id(),
            "balance": 0,
            "spins": [],
            "inventory": [],
            "wins": 0,
            "losses": 0,
            "draws": 0,
            "pvp_selected": None,
            "pvp_opponent": None,
            "used_today": {},  # id –∫–∞—Ä—Ç—ã: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
            "username": "",
        }

# === –ö–æ–º–∞–Ω–¥–∞ /start ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = str(update.effective_user.id)
    ensure_user(uid)

    if users[uid].get("registered"):
        await update.message.reply_text(
            "–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.\n"
            "–ù–∞–ø–∏—à–∏—Ç–µ /myid, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å —Å–≤–æ–π —É–Ω–∏–∫–∞–ª—å–Ω—ã–π PvP-–∫–æ–¥."
        )
        return

    users[uid]["registered"] = True
    users[uid]["username"] = update.effective_user.username or update.effective_user.full_name
    save_all()

    await update.message.reply_text(
        f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–∞—Ä—Ç–æ—á–Ω–æ–≥–æ PvP-–±–æ—Ç–∞!\n"
        f"–¢–≤–æ–π —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID: {users[uid]['unique_id']}\n"
        f"–ü–µ—Ä–µ–¥–∞–π –µ–≥–æ –¥—Ä—É–∑—å—è–º, —á—Ç–æ–±—ã –æ–Ω–∏ –º–æ–≥–ª–∏ –≤—ã–∑–≤–∞—Ç—å —Ç–µ–±—è –Ω–∞ –¥—É—ç–ª—å.\n"
        f"–ù–∞–ø–∏—à–∏ /profile —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å."
    )

# === –ö–æ–º–∞–Ω–¥–∞ /myid ===
async def myid(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = str(update.effective_user.id)
    ensure_user(uid)
    await update.message.reply_text(f"–¢–≤–æ–π —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID: {users[uid]['unique_id']}")

# === –ö–æ–º–∞–Ω–¥–∞ /profile ===
async def profile(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = str(update.effective_user.id)
    ensure_user(uid)
    user = users[uid]

    total_value = sum([cards.get(c['id'], {}).get("price", 0) for c in user["inventory"]])
    rarity_count = {}

    for c in user["inventory"]:
        r = cards.get(c["id"], {}).get("rarity", "–û–±—ã—á–Ω–∞—è")
        rarity_count[r] = rarity_count.get(r, 0) + 1

    text = (
        f"üë§ –ü—Ä–æ—Ñ–∏–ª—å –∏–≥—Ä–æ–∫–∞\n"
        f"–£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID: {user['unique_id']}\n"
        f"–ë–∞–ª–∞–Ω—Å –†—ë: {user['balance']}\n"
        f"–ü–æ–±–µ–¥: {user['wins']}\n"
        f"–ü–æ—Ä–∞–∂–µ–Ω–∏–π: {user['losses']}\n"
        f"–ù–∏—á—å–∏: {user['draws']}\n"
        f"–°—Ç–æ–∏–º–æ—Å—Ç—å –∫–æ–ª–ª–µ–∫—Ü–∏–∏: {total_value} –†—ë\n"
        f"–í—Å–µ–≥–æ –∫–∞—Ä—Ç: {len(user['inventory'])}\n\n"
    )
    text += "–ö–∞—Ä—Ç—ã –ø–æ —Ä–µ–¥–∫–æ—Å—Ç–∏:\n"
    for r, count in rarity_count.items():
        text += f" - {r}: {count}\n"

    buttons = [[InlineKeyboardButton("üìñ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –∫–∞—Ä—Ç—ã", callback_data="view_all_cards")]]
    await update.message.reply_text(text, reply_markup=InlineKeyboardMarkup(buttons))

# === –ö–∞—Ä—Ç–æ—á–∫–∏ –ø–æ —à–∞–±–ª–æ–Ω—É (4 –ø—Ä–∏–º–µ—Ä–∞) ===
def init_card_templates():
    global cards
    if cards:
        return
    cards = {
        "c1": {
            "name": "–ì—Ä–µ—Ñ",
            "rarity": "–ú–∏—Ñ–∏—á–µ—Å–∫–∞—è",
            "price": 100,
            "image": "gref.jpeg"
        },
        "c5": {
            "name": "Cselx",
            "rarity": "–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω–∞—è",
            "price": 75,
            "image": "cselx.jpeg"
        },
        "c6": {
            "name": "–í–∏—Å—Ö–∞–Ω",
            "rarity": "–ú–∏—Ñ–∏—á–µ—Å–∫–∞—è",
            "price": 150,
            "image": "vvvv.jpeg"
        },
        "c7": {
            "name": "Boob",
            "rarity": "–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω–∞—è",
            "price": 75,
            "image": "boob.jpeg"
        },
        "c8": {
            "name": "–ê–∫—Ñ–ª—É–ø",
            "rarity": "–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω–∞—è",
            "price": 75,
            "image": "akflyp.jpeg"
        },
        "c9": {
            "name": "–§–µ–π—Å–∏",
            "rarity": "–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω–∞—è",
            "price": 75,
            "image": "imran.jpeg"
        },
        "c10": {
            "name": "–ò–ª—å–¥–∞—Ä",
            "rarity": "–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω–∞—è",
            "price": 75,
            "image": "ildar.jpeg"
        },
        "c11": {
            "name": "–ö–ª–µ–∫—Å",
            "rarity": "–û–±—ã—á–Ω–∞—è",
            "price": 2,
            "image": "cselx2.png"
        },
        "c12": {
            "name": "–ö–∞—Ç–∞–Ω–∞",
            "rarity": "–û–±—ã—á–Ω–∞—è",
            "price": 2,
            "image": "serafim2.jpeg"
        },
        "c13": {
            "name": "–ú–∞—Å—Ä—É—Ä",
            "rarity": "–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω–∞—è",
            "price": 75,
            "image": "masrur.jpeg"
        },
        "c14": {
            "name": "–ê–∫—Ñ–ª—É–ø2",
            "rarity": "–û–±—ã—á–Ω–∞—è",
            "price": 1,
            "image": "akfyp2.jpeg"
        },
        "c2": {
            "name": "–õ–∏–ª–∏—Ç",
            "rarity": "Limited",
            "price": 500,
            "image": "lilith.jpeg"
        },
        "c3": {
            "name": "–°–µ—Ä–∞—Ñ–∏–º",
            "rarity": "–ú–∏—Ñ–∏—á–µ—Å–∫–∞—è",
            "price": 100,
            "image": "serafim.jpeg"
        },
        "c4": {
            "name": "–ê–¥–º–∏–Ω –ü—Ä–æ—à–º–∞–Ω–¥–æ–≤–æ–∫",
            "rarity": "Limited",
            "price": 1000,
            "image": "adminp.jpeg"
        },
        
    }
    save_json(CARDS_FILE, cards)

# === –ö–æ–º–∞–Ω–¥–∞ /spin ===
async def spin(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = str(update.effective_user.id)
    ensure_user(uid)
    user = users[uid]
    now = time.time()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–¥–µ—Ä–∂–∫–∏ 5 —á–∞—Å–æ–≤
    recent_spins = [s for s in user["spins"] if now - s < 5 * 3600]
    if recent_spins:
        remain = int(5 * 3600 - (now - recent_spins[-1])) // 60
        await update.message.reply_text(f"–°–ª–µ–¥—É—é—â–∏–π —Å–ø–∏–Ω –¥–æ—Å—Ç—É–ø–µ–Ω —á–µ—Ä–µ–∑ {remain} –º–∏–Ω—É—Ç.")
        return

    # –í—ã–±–æ—Ä —Å–ª—É—á–∞–π–Ω–æ–π –∫–∞—Ä—Ç—ã –ø–æ —à–∞–Ω—Å–∞–º
    roll = random.uniform(0, 100)
    acc = 0
    chosen_card_id = "c4"  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
    for cid, card in cards.items():
        rarity = card["rarity"]
        for r, chance in RARITY_CHANCES:
            if rarity == r:
                acc += chance
                if roll <= acc:
                    chosen_card_id = cid
                break

    card = cards[chosen_card_id]
    user["inventory"].append({"id": chosen_card_id})
    user["spins"].append(now)
    save_all()

    await update.message.reply_photo(
        photo=open(card["image"], "rb") if os.path.exists(card["image"]) else None,
        caption=(
            f"–¢—ã –ø–æ–ª—É—á–∏–ª –∫–∞—Ä—Ç—É!\n\n"
            f"–ò–º—è: {card['name']}\n"
            f"–†–µ–¥–∫–æ—Å—Ç—å: {card['rarity']}\n"
            f"–°—Ç–æ–∏–º–æ—Å—Ç—å: {card['price']} –†—ë"
        )
    )

async def spingive(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id != CREATOR_ID:
        await update.message.reply_text("–£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.")
        return

    if len(context.args) != 2:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π: /spingive <–∫–æ–ª-–≤–æ> <uid>")
        return

    try:
        amount = int(context.args[0])
        target_uid = context.args[1]

        if target_uid in user_data:
            user_data[target_uid]['spins'] += amount
            save_data()
            await update.message.reply_text(f"–í—ã–¥–∞–Ω–æ {amount} —Å–ø–∏–Ω–æ–≤ –∏–≥—Ä–æ–∫—É —Å ID {target_uid}.")
        else:
            await update.message.reply_text("–ò–≥—Ä–æ–∫ —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    except:
        await update.message.reply_text("–û—à–∏–±–∫–∞. –ü—Ä–æ–≤–µ—Ä—å –≤–≤–æ–¥.")

# === /dublicate ‚Äî –ø—Ä–æ–¥–∞–∂–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –∑–∞ –†—ë ===
async def dublicate(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = str(update.effective_user.id)
    ensure_user(uid)
    user = users[uid]

    rarity_list = ["Limited", "–ú–∏—Ñ–∏—á–µ—Å–∫–∞—è", "–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω–∞—è", "–≠–ø–∏—á–µ—Å–∫–∞—è", "–†–µ–¥–∫–∞—è", "–û–±—ã—á–Ω–∞—è"]
    buttons = [[InlineKeyboardButton(r, callback_data=f"dup_{r}")] for r in rarity_list]
    await update.message.reply_text("–í—ã–±–µ—Ä–∏ —Ä–µ–¥–∫–æ—Å—Ç—å –¥–ª—è –æ–±–º–µ–Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤:", reply_markup=InlineKeyboardMarkup(buttons))

async def handle_duplicate_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    uid = str(query.from_user.id)
    rarity = query.data.split("_")[1]
    ensure_user(uid)

    cards_of_rarity = [c for c in users[uid]["inventory"] if cards.get(c["id"], {}).get("rarity") == rarity]
    counted = {}
    for c in cards_of_rarity:
        counted[c["id"]] = counted.get(c["id"], 0) + 1

    options = []
    for cid, count in counted.items():
        if count > 1:
            card = cards[cid]
            options.append([
                InlineKeyboardButton(f"{card['name']} ({count})", callback_data=f"sell_{cid}"),
                InlineKeyboardButton("üí∞ –í—Å–µ", callback_data=f"sellall_{cid}")
            ])
    if not options:
        await query.edit_message_text("–ù–µ—Ç –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ä–µ–¥–∫–æ—Å—Ç–∏.")
    else:
        await query.edit_message_text("–í—ã–±–µ—Ä–∏ –∫–∞—Ä—Ç—É –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏:", reply_markup=InlineKeyboardMarkup(options))

async def handle_sell(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    uid = str(query.from_user.id)
    ensure_user(uid)

    data = query.data
    cid = data.split("_")[1]
    user = users[uid]
    card_price = cards[cid]["price"]

    if data.startswith("sellall_"):
        count = sum(1 for c in user["inventory"] if c["id"] == cid)
        sold = count - 1
        user["inventory"] = [c for c in user["inventory"] if c["id"] != cid] + [{"id": cid}]
        user["balance"] += sold * card_price
        await query.edit_message_text(f"–ü—Ä–æ–¥–∞–Ω–æ {sold} –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –ø–æ {card_price} –†—ë = {sold * card_price}")
    elif data.startswith("sell_"):
        inv = [i for i, c in enumerate(user["inventory"]) if c["id"] == cid]
        if len(inv) < 2:
            await query.edit_message_text("–£ —Ç–µ–±—è —Ç–æ–ª—å–∫–æ 1 —Ç–∞–∫–∞—è –∫–∞—Ä—Ç–∞.")
            return
        user["inventory"].pop(inv[0])
        user["balance"] += card_price
        await query.edit_message_text(f"–ü—Ä–æ–¥–∞–Ω–æ 1 –¥—É–±–ª–∏–∫–∞—Ç –∑–∞ {card_price} –†—ë")

    save_all()

# === /inventory ‚Äî –ª–∏—Å—Ç–∞–Ω–∏–µ –∫–∞—Ä—Ç ===
async def inventory(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = str(update.effective_user.id)
    ensure_user(uid)

    inv = users[uid]["inventory"]
    if not inv:
        await update.message.reply_text("–ò–Ω–≤–µ–Ω—Ç–∞—Ä—å –ø—É—Å—Ç.")
        return
    context.user_data["inv_index"] = 0
    await show_card(update, context, uid, 0)

async def show_card(update, context, uid, index):
    inv = users[uid]["inventory"]
    card_id = inv[index]["id"]
    card = cards[card_id]
    text = (
        f"–ò–º—è: {card['name']}\n"
        f"–†–µ–¥–∫–æ—Å—Ç—å: {card['rarity']}\n"
        f"–°—Ç–æ–∏–º–æ—Å—Ç—å: {card['price']} –†—ë"
    )
    buttons = []
    if index > 0:
        buttons.append(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"card_{index - 1}"))
    if index < len(inv) - 1:
        buttons.append(InlineKeyboardButton("‚û°Ô∏è –î–∞–ª–µ–µ", callback_data=f"card_{index + 1}"))

    media = InputMediaPhoto(open(card["image"], "rb")) if os.path.exists(card["image"]) else None

    if update.callback_query:
        await update.callback_query.edit_message_media(media, reply_markup=InlineKeyboardMarkup([buttons]) if buttons else None)
        await update.callback_query.edit_message_caption(caption=text)
    else:
        await update.message.reply_photo(photo=open(card["image"], "rb") if os.path.exists(card["image"]) else None,
                                         caption=text,
                                         reply_markup=InlineKeyboardMarkup([buttons]) if buttons else None)

async def handle_card_scroll(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    uid = str(query.from_user.id)
    index = int(query.data.split("_")[1])
    await show_card(update, context, uid, index)

# === /promocode ‚Äî –≤–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º ===
async def promocode(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = str(update.effective_user.id)
    ensure_user(uid)
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥:")
    context.user_data["awaiting_promo"] = True

async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = str(update.effective_user.id)
    ensure_user(uid)

    if context.user_data.get("awaiting_promo"):
        code = update.message.text.strip()
        promos = load_json(PROMO_FILE)

        if code in promos:
            amount = promos[code]["amount"]
            users[uid]["balance"] += amount
            del promos[code]
            save_json(PROMO_FILE, promos)
            save_all()
            await update.message.reply_text(f"–ü—Ä–æ–º–æ–∫–æ–¥ –ø—Ä–∏–º–µ–Ω—ë–Ω! +{amount} –†—ë")
        elif code == daily_code.get("code"):
            if uid in daily_code.get("used", []):
                await update.message.reply_text("–¢—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª —Å—É—Ç–æ—á–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥.")
            else:
                users[uid]["balance"] += daily_code["amount"]
                daily_code.setdefault("used", []).append(uid)
                save_all()
                await update.message.reply_text(f"–°—É—Ç–æ—á–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω! +{daily_code['amount']} –†—ë")
        else:
            await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥.")
        context.user_data["awaiting_promo"] = False

# === /code ‚Äî —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞ ===
async def admin_code(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = str(update.effective_user.id)
    if uid != str(ADMIN_ID):
        return await update.message.reply_text("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.")
    args = context.args
    if len(args) == 0:
        promos = load_json(PROMO_FILE)
        text = "üìú –ê–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ–º–æ–∫–æ–¥—ã:\n"
        for code, data in promos.items():
            text += f"{code} ‚Äî {data['amount']} –†—ë\n"
        await update.message.reply_text(text or "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤.")
    elif len(args) == 2:
        code = args[0]
        target_uid = args[1]
        promos = load_json(PROMO_FILE)
        promos[code] = {"amount": random.choice([10, 30, 50])}
        save_json(PROMO_FILE, promos)
        await update.message.reply_text(f"–ü—Ä–æ–º–æ–∫–æ–¥ {code} —Å–æ–∑–¥–∞–Ω –¥–ª—è {target_uid}.")
    else:
        await update.message.reply_text("–§–æ—Ä–º–∞—Ç: /code <–∫–æ–¥> <—É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –∏–≥—Ä–æ–∫–∞>")

# === –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –∫–æ–¥–∞ ===
def update_daily_code():
    global daily_code
    now = datetime.datetime.now()
    if "expires" not in daily_code or datetime.datetime.fromisoformat(daily_code["expires"]) < now:
        daily_code = {
            "code": f"DAY{random.randint(100, 999)}",
            "amount": 50,
            "used": [],
            "expires": (now + datetime.timedelta(days=1)).isoformat()
        }
        save_json(DAILY_CODE_FILE, daily_code)

# === /shop ‚Äî –ø–æ–∫—É–ø–∫–∞ –†—ë –∏–ª–∏ —Å–ø–∏–Ω–æ–≤ ===
async def shop(update: Update, context: ContextTypes.DEFAULT_TYPE):
    buttons = [
        [InlineKeyboardButton("–ö—É–ø–∏—Ç—å —Å–ø–∏–Ω (10 –†—ë)", callback_data="buy_spin")],
        [InlineKeyboardButton("–ö—É–ø–∏—Ç—å –†—ë (—á–µ—Ä–µ–∑ DonationAlerts)", url="https://www.donationalerts.com/r/viskhanzzzz")]
    ]
    await update.message.reply_text("–ú–∞–≥–∞–∑–∏–Ω", reply_markup=InlineKeyboardMarkup(buttons))

async def handle_shop_buttons(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    uid = str(query.from_user.id)
    ensure_user(uid)

    if query.data == "buy_spin":
        if users[uid]["balance"] < 10:
            await query.edit_message_text("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –†—ë.")
        else:
            users[uid]["balance"] -= 10
            users[uid]["spins"].append(0)  # –ü–æ–∑–≤–æ–ª—è–µ—Ç —Å—Ä–∞–∑—É –∫—Ä—É—Ç–∏—Ç—å
            save_all()
            await query.edit_message_text("–¢—ã –∫—É–ø–∏–ª –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Å–ø–∏–Ω. –ò—Å–ø–æ–ª—å–∑—É–π /spin.")

# === /pvp ‚Äî –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤—ã–∑–æ–≤–∞ ===
async def pvp(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = str(update.effective_user.id)
    ensure_user(uid)

    if update.message.reply_to_message:
        target_id = str(update.message.reply_to_message.from_user.id)
    elif context.args:
        target_code = context.args[0]
        target_id = next((k for k, v in users.items() if v["unique_id"] == target_code), None)
    else:
        return await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π /pvp <–∫–æ–¥ –∏–≥—Ä–æ–∫–∞> –∏–ª–∏ –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ –µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–µ.")

    if not target_id or target_id == uid or target_id not in users:
        return await update.message.reply_text("–ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.")

    users[uid]["pvp_opponent"] = target_id
    users[target_id]["pvp_opponent"] = uid
    save_all()
    await update.message.reply_text("–í—ã–∑–æ–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω. –ñ–¥—ë–º, –ø–æ–∫–∞ —Å–æ–ø–µ—Ä–Ω–∏–∫ –ø—Ä–∏–º–µ—Ç —Å—Ä–∞–∂–µ–Ω–∏–µ.")
    await context.bot.send_message(chat_id=target_id, text="–¢–µ–±–µ –∫–∏–Ω—É–ª–∏ –≤—ã–∑–æ–≤! –ù–∞–ø–∏—à–∏ /accept, —á—Ç–æ–±—ã –ø—Ä–∏–Ω—è—Ç—å.")

# === /accept ‚Äî –ø—Ä–∏–Ω—è—Ç–∏–µ –≤—ã–∑–æ–≤–∞ ===
async def accept(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = str(update.effective_user.id)
    ensure_user(uid)
    opponent = users[uid].get("pvp_opponent")

    if not opponent:
        return await update.message.reply_text("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –≤—ã–∑–æ–≤–æ–≤.")
    
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ä—Ç—É –¥–ª—è –±–∏—Ç–≤—ã:")
    await show_card_choice(update, context, uid)

async def show_card_choice(update, context, uid):
    buttons = []
    inv = users[uid]["inventory"]
    for i, c in enumerate(inv):
        cid = c["id"]
        name = cards[cid]["name"]
        rarity = cards[cid]["rarity"]
        use_count = users[uid]["used_today"].get(cid, 0)
        if use_count >= 5:
            continue
        buttons.append([InlineKeyboardButton(f"{name} ({rarity})", callback_data=f"choose_{i}")])
    if not buttons:
        return await update.message.reply_text("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞—Ä—Ç. –í—Å–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã —Å–µ–≥–æ–¥–Ω—è.")
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ä—Ç—É:", reply_markup=InlineKeyboardMarkup(buttons))

async def choose_card(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    uid = str(query.from_user.id)
    index = int(query.data.split("_")[1])
    card = users[uid]["inventory"][index]
    cid = card["id"]

    if users[uid]["used_today"].get(cid, 0) >= 5:
        await query.answer("–≠—Ç–∞ –∫–∞—Ä—Ç–∞ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∞—Å—å 5 —Ä–∞–∑ —Å–µ–≥–æ–¥–Ω—è.", show_alert=True)
        return

    users[uid]["pvp_selected"] = card
    users[uid]["used_today"][cid] = users[uid]["used_today"].get(cid, 0) + 1
    await query.edit_message_text(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–∞—Ä—Ç—É: {cards[cid]['name']}")

    opp = users[uid]["pvp_opponent"]
    if users.get(opp, {}).get("pvp_selected"):
        await resolve_battle(uid, opp, context, update.effective_chat.id)

async def resolve_battle(uid1, uid2, context, chat_id):
    u1 = users[uid1]
    u2 = users[uid2]
    c1 = cards[u1["pvp_selected"]["id"]]
    c2 = cards[u2["pvp_selected"]["id"]]

    r1, r2 = RARITY_WIN_CHANCE[c1["rarity"]], RARITY_WIN_CHANCE[c2["rarity"]]
    chance = 50 + (r1 - r2) // 2
    draw_chance = 5

    roll = random.randint(1, 100)
    if roll <= draw_chance:
        result = "‚öîÔ∏è –ë–æ–π –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –Ω–∏—á—å–µ–π!"
        u1["draws"] += 1
        u2["draws"] += 1
    elif roll <= chance:
        winner, loser = uid1, uid2
    else:
        winner, loser = uid2, uid1

    if roll > draw_chance:
        users[winner]["wins"] += 1
        users[loser]["losses"] += 1
        # –ü–æ–±–µ–¥–∏—Ç–µ–ª—å –ø–æ–ª—É—á–∞–µ—Ç –∫–∞—Ä—Ç—É —Å–æ–ø–µ—Ä–Ω–∏–∫–∞
        users[winner]["inventory"].append(users[loser]["pvp_selected"])
        users[loser]["inventory"].remove(users[loser]["pvp_selected"])
        result = f"üèÜ –ü–æ–±–µ–¥–∏–ª: @{users[winner]['username']} –∏ –∑–∞–±—Ä–∞–ª –∫–∞—Ä—Ç—É!"

    u1["pvp_selected"] = None
    u2["pvp_selected"] = None
    u1["pvp_opponent"] = None
    u2["pvp_opponent"] = None
    save_all()

    await context.bot.send_message(chat_id=chat_id, text=f"–ü–æ–±–µ–¥–∏–ª: {winner}\n–ü—Ä–æ–∏–≥—Ä–∞–ª: {loser}")
    await resolve_pvp(user_id, opp_id, context, update.effective_chat.id)

# === –¢–æ–ø –ø–æ –ø–æ–±–µ–¥–∞–º /topf –∏ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ /topc ===
async def topf(update: Update, context: ContextTypes.DEFAULT_TYPE):
    top = sorted(users.items(), key=lambda x: x[1]["wins"], reverse=True)[:10]
    text = "üèÜ –¢–æ–ø –∏–≥—Ä–æ–∫–æ–≤ –ø–æ –ø–æ–±–µ–¥–∞–º:\n"
    for i, (uid, u) in enumerate(top, 1):
        text += f"{i}. @{u['username']} ‚Äî {u['wins']} –ø–æ–±–µ–¥\n"
    await update.message.reply_text(text)

async def topc(update: Update, context: ContextTypes.DEFAULT_TYPE):
    def calc_value(u): return sum(cards.get(c["id"], {}).get("price", 0) for c in u["inventory"])
    top = sorted(users.items(), key=lambda x: calc_value(x[1]), reverse=True)[:10]
    text = "üí∞ –¢–æ–ø –ø–æ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∫–æ–ª–ª–µ–∫—Ü–∏–∏:\n"
    for i, (uid, u) in enumerate(top, 1):
        text += f"{i}. @{u['username']} ‚Äî {calc_value(u)} –†—ë\n"
    await update.message.reply_text(text)

# === –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π —Å–±—Ä–æ—Å ===
def reset_daily_usage():
    for u in users.values():
        u["used_today"] = {}
        u["daily_claimed"] = False
    save_all()

# === –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ===
def main():
    load_all()
    update_daily_code()

    app = ApplicationBuilder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("myid", myid))
    app.add_handler(CommandHandler("profile", profile))
    app.add_handler(CommandHandler("spin", spin))
    app.add_handler(CommandHandler("inventory", inventory))
    app.add_handler(CommandHandler("dublicate", dublicate))
    app.add_handler(CommandHandler("promocode", promocode))
    app.add_handler(CommandHandler("code", admin_code))
    app.add_handler(CommandHandler("shop", shop))
    app.add_handler(CommandHandler("topf", topf))
    app.add_handler(CommandHandler("topc", topc))
    app.add_handler(CommandHandler("pvp", pvp))
    app.add_handler(CommandHandler("accept", accept))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))
    app.add_handler(CallbackQueryHandler(handle_duplicate_menu, pattern="^dup_"))
    app.add_handler(CallbackQueryHandler(handle_sell, pattern="^sell"))
    app.add_handler(CallbackQueryHandler(handle_card_scroll, pattern="^card_"))
    app.add_handler(CallbackQueryHandler(choose_card, pattern="^choose_"))
    app.add_handler(CallbackQueryHandler(handle_shop_buttons, pattern="^buy_"))
    app.add_handler(CommandHandler("spingive", spingive))

    app.run_polling()

if __name__ == "__main__":
    main()            
